// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  name      String?
  password  String
  role      String  @default("student")
  profile   Profile?
  courses   Course[]  @relation("CourseInstructor") 
  enrollments Enrollment[]
  posts     Post[]    
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  Submission Submission[]
}

model Profile {
  id     Int    @id @default(autoincrement())
  bio    String?
  user   User   @relation(fields: [userId], references: [id])
  userId Int    @unique
}

model Course {
  id            Int          @id @default(autoincrement())
  title         String       @unique @db.VarChar(255)
  description   String?
  published     Boolean      @default(false)
  instructor    User         @relation("CourseInstructor", fields: [instructorId], references: [id])
  instructorId  Int
  enrollments   Enrollment[]
  assignments   Assignment[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Enrollment {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId]) 
}

model Assignment {
  id          Int        @id @default(autoincrement())
  title       String     @db.VarChar(255)
  description String?
  dueDate     DateTime?
  course      Course     @relation(fields: [courseId], references: [id])
  courseId    Int
  submissions Submission[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Submission {
  id          Int       @id @default(autoincrement())
  content     String?
  student     User      @relation(fields: [studentId], references: [id])
  studentId   Int
  assignment  Assignment @relation(fields: [assignmentId], references: [id])
  assignmentId Int
  grade       Float?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Post {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String   @db.VarChar(255)
  content     String?
  published   Boolean  @default(false)
  author      User     @relation(fields: [authorId], references: [id])
  authorId    Int
}
